import { motion } from 'framer-motion';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useState, useRef, useEffect } from 'react';
import { Droppable } from 'react-beautiful-dnd';
import { Draggable } from 'react-beautiful-dnd';
import { DragDropContext } from 'react-beautiful-dnd';
import { useInView } from 'react-intersection-observer';
import styles from '../styles/Home.module.css';

const defaultEndpoint = 'https://rickandmortyapi.com/api/character';

export async function getServerSideProps(context) {
  const res = await fetch(defaultEndpoint);
  const data = await res.json();
  return {
    props: { data },
  };
}

export default function Home({ data }) {
  const { ref: myRef, inView: myElementIsVisible } = useInView();
  const { ref: rocketRef, inView: rocketIsVisible } = useInView();

  // const myRef = useRef();
  // const [myElementIsVisible, setMyElementIsVisible] = useState();
  // useEffect(() => {
  //   // console.log('myRef', myRef.current);
  //   const observer = new IntersectionObserver(entries => {
  //     const entry = entries[0];
  //     setMyElementIsVisible(entry.isIntersecting);
  //   });
  //   observer.observe(myRef.current);
  // }, []);

  console.log(data);
  const { info, results: defaultResults = [] } = data;
  const [results, setResults] = useState(defaultResults);
  const [page, setPage] = useState({
    ...info,
    current: defaultEndpoint,
  });
  const { current } = page;

  useEffect(() => {
    if (current === defaultEndpoint) return;

    async function request() {
      const res = await fetch(current);
      const nextData = await res.json();

      setPage({
        ...current,
        ...nextData.info,
      });

      if (!nextData.info?.prev) {
        setResults(nextData.results);
        return;
      }

      setResults(prev => {
        return [...prev, ...nextData.results];
      });
    }

    request();
  }, [current]);

  function handleLoadMore() {
    setPage(prev => {
      return {
        ...prev,
        current: page?.next,
      };
    });
  }

  function handleOnSubmitSearch(e) {
    e.preventDefault();

    const { currentTarget = {} } = e;
    const fields = Array.from(currentTarget?.elements);
    const fieldQuery = fields.find(field => field.name === 'query');

    const value = fieldQuery.value || '';
    const endpoint = `https://rickandmortyapi.com/api/character/?name=${value} `;

    setPage({ current: endpoint });
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Rick And Morty Wiki</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <motion.div
          initial='hidden'
          animate='visible'
          variants={{
            hidden: {
              scale: 0.8,
              opacity: 0,
            },
            visible: {
              scale: 1,
              opacity: 1,
              transition: {
                delay: 0.4,
              },
            },
          }}>
          <h1 className={styles.title}>Wubba Lubba Dub Dub</h1>
        </motion.div>

        <p className={styles.description}>Rick And Morty Wiki</p>

        <form className='search' onSubmit={handleOnSubmitSearch}>
          <input name='query' type='search' />
          <button>Search</button>
        </form>

        <DragDropContext>
          <Droppable droppableId='characters'>
            {provided => {
              <div
                className={styles.grid}
                {...provided.droppableProps}
                ref={provided.innerRef}>
                {results.map((result, index) => (
                  <Draggable
                    key={result.id}
                    draggableId={result.id}
                    index={index}>
                    {provided => (
                      <Link
                        href='/character/[id]'
                        as={`/character/${result.id}`}
                        passHref
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        ref={provided.innerRef}>
                        <motion.a
                          className={styles.card}
                          whileHover={{
                            scale: [1, 1.15, 1.1],
                            rotate: [0, 10, -10, 0],
                            filter: [
                              'hue-rotate(0) contrast(100%)',
                              'hue-rotate(360deg) contrast(200%)',
                              'hue-rotate(45deg) contrast(300%)',
                              'hue-rotate(0) contrast(100%)',
                            ],
                            transition: { duration: 0.3 },
                          }}>
                          <Image
                            src={result.image}
                            width={200}
                            height={200}
                            alt={result.name}
                          />
                          <h3>{result.name}</h3>
                        </motion.a>
                      </Link>
                    )}
                  </Draggable>
                ))}
              </div>;
            }}
          </Droppable>
        </DragDropContext>

        <h1 ref={myRef}>
          Want To Get More??? - {myElementIsVisible ? 'Yes!' : 'No!'}
        </h1>
        <p ref={rocketRef}>
          <span className={`rocket ${rocketIsVisible ? 'animateRocket' : ''}`}>
            ðŸš€
          </span>
        </p>
        <div>
          <button onClick={handleLoadMore}>Load More</button>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'>
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
